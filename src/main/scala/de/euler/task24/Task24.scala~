package de.eueler.task24

class Task24 {
  //method to find the next permutation
  //find element l, after wich all following elements are in descending order
  //pick smallest element in descending order, larger than l and bring it to pos (l)
  //sort elements after pos(l) in ascending order

  /*
   *(1,2,3) ((1),2,(3)) -> (x._1 ::: tn =( x._3.filter(_>x._2 ).min :: (x._2 :: (x._3.without(tn))).sort))
   *(1,3,2) (Nil,1,(2,3)) -> (x._3 (min > pivot)))
   *
  */

  def nextPerm(rList: List[Int]): List[Int] = {
    /*
     * takes a permutation and pivotizes it
     * rList: a reversed list of the actual permutation eg. (3,1,2) for the permutation (2,1,3)
     * returns:a pivotized list ((3),1,(2))
     */
    def pivotize(rList: List[Int]): (List[Int], Int, List[Int]) = {
      if (list.tail == Nil) { 
        return (Nil, list.head, Nil)
      } else if (list.head > list.tail.head) {
        return (Nil, list.tail.head, list.tail.tail)
      } else {
        val tailResult = pivotize(rList.tail)
        return (list.head :: tailResult._1, tailResult._2, tailResult._3)
      }
    }
    val piv = pivotize(rList)
    val newpiv2 = piv._3.filter(_ > piv._2).min
    val newpiv3 = (piv :: piv._3.filter(_ != newpiv2)).sort
    return piv._1 ::: (newpiv2 :: newpiv3)
  }

  def permStream(n: Int): Stream[List[Int]] = {
    Stream.iterate((n to 0).toList)(nextPerm)
  }

  def solve(numberList: List[Int] = List(0, 1, 2, 3, 4, 5, 6, 7, 8, 9),nthPerm:Int = 1000000): Any = {

  }

}
